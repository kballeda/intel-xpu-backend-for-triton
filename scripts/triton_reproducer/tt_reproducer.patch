diff --git a/python/test/unit/operators/test_matmul.py b/python/test/unit/operators/test_matmul.py
index ab35b7fd..b5190d7e 100644
--- a/python/test/unit/operators/test_matmul.py
+++ b/python/test/unit/operators/test_matmul.py
@@ -193,6 +193,39 @@ def test_op(BLOCK_M, BLOCK_N, BLOCK_K, SPLIT_K, NWARP, NSTAGE, M, N, K, AT, BT,
     acc_dtype = getattr(torch, ACC_DTYPE) if ACC_DTYPE else ab_dtype
     output_dtype = getattr(torch, OUTPUT_DTYPE) if OUTPUT_DTYPE else ab_dtype
     th_c = torch.matmul(th_a.to(output_dtype), th_b.to(output_dtype))
+    
+    # File Dumps
+    a_host = a.cpu()
+    b_host = b.cpu()
+    torch_host = th_c.cpu()
+    a_np = a_host.numpy()
+    b_np = b_host.numpy()
+    torch_np = torch_host.numpy()
+    inpath = './scripts/triton_reproducer/data/'
+    with open(inpath + 'a.bin', 'wb') as f:
+        f.write(a_np.tobytes())
+
+    with open(inpath + 'b.bin', 'wb') as f:
+        f.write(b_np.tobytes())
+
+    with open(inpath + 'th.bin', 'wb') as f:
+        f.write(torch_np.tobytes())
+
+    with open(inpath + 'input.txt', 'a') as f:
+        f.write("ARRAY, ")
+        f.write(ADTYPE)
+        f.write(", ./data/a.bin, 0\n")
+    with open(inpath + 'input.txt', 'a') as f:
+        f.write("ARRAY, ")
+        f.write(BDTYPE)
+        f.write(", ./data/b.bin, 0\n")
+    if OUTPUT_DTYPE == None:
+        OUTPUT_DTYPE = ADTYPE
+    with open(inpath + 'input.txt', 'a') as f:
+        f.write("ARRAY, ")
+        f.write(OUTPUT_DTYPE)
+        f.write(", ./data/th.bin, 1\n")
+
     try:
         if is_fp8(ADTYPE):
             a = triton.reinterpret(a, getattr(tl, ADTYPE))
diff --git a/third_party/intel/backend/driver.py b/third_party/intel/backend/driver.py
index a454eb6e..aa1ac08d 100644
--- a/third_party/intel/backend/driver.py
+++ b/third_party/intel/backend/driver.py
@@ -141,6 +141,7 @@ def make_launcher(constants, signature, ids):
     #include <iomanip>
     #include <level_zero/ze_api.h>
     #include <sycl/sycl.hpp>
+    #include <fstream>
 
     #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
     #include <Python.h>
@@ -231,14 +232,18 @@ def make_launcher(constants, signature, ids):
           int index,
           size_t size,
           const void* value) {{
+      std::ofstream file("./scripts/triton_reproducer/data/input.txt", std::ios::app);
       switch (size) {{
       case sizeof(uint8_t):
+      file << "VAR, uint8, " << *static_cast<const uint8_t*>(value) << ", 0" << std::endl; 
       cgh.set_arg(index, *static_cast<const uint8_t*>(value));
       break;
       case sizeof(uint16_t):
+      file << "VAR, uint16, " << *static_cast<const uint16_t*>(value) << ", 0" << std::endl; 
       cgh.set_arg(index, *static_cast<const uint16_t*>(value));
       break;
       case sizeof(uint32_t):
+      file << "VAR, uint32, " << *static_cast<const uint32_t*>(value) << ", 0" << std::endl; 
       cgh.set_arg(index, *static_cast<const uint32_t*>(value));
       break;
       case sizeof(uint64_t):
@@ -247,6 +252,7 @@ def make_launcher(constants, signature, ids):
       default:
       assert(false && "wrong scalar size in sycl gen.");
       }}
+      file.close();
   }}
   static void sycl_kernel_launch(uint32_t gridX, uint32_t gridY, uint32_t gridZ, int num_warps, int threads_per_warp, int shared_memory, sycl::queue& stream, sycl::kernel& kernel_ptr {', ' + arg_decls if len(arg_decls) > 0 else ''}) {{
 
@@ -274,6 +280,10 @@ def make_launcher(constants, signature, ids):
           using share_mem_t = sycl::local_accessor<int8_t, 1>;
           share_mem_t local_buffer = share_mem_t(shared_memory, cgh);
           cgh.set_arg(num_params, local_buffer);
+          std::ofstream file("./scripts/triton_reproducer/data/input.txt", std::ios::app);
+          file << "SM, int, " << shared_memory << ", 0" << std::endl; 
+          file << "GDIM, " << gridX << ", " << gridY << ", " << gridZ << ", " << num_warps << ", " << threads_per_warp << std::endl;
+          file.close();
           cgh.parallel_for(parallel_work_size, kernel_ptr);
       }} else {{
           cgh.parallel_for(parallel_work_size, kernel_ptr);
